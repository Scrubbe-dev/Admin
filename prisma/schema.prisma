generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        String                      @id @default(uuid())
  email                     String                      @unique
  passwordHash              String?
  firstName                 String?
  lastName                  String?
  profileImage              String?
  isVerified                Boolean                     @default(false)
  isActive                  Boolean                     @default(true)
  lastLogin                 DateTime?
  apiKeyDuration            DateTime                    @default(now())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  apiKey                    String?                     @default(cuid())
  role                      Role                        @default(USER)
  passwordChangedAt         DateTime?
  username                  String?
  accountType               AccountType?
  oauthprovider             OAuthProvider?
  registerdWithOauth        Boolean                     @default(false)
  oauthProvider_uuid        String?
  scopes                    String[]                    @default(["api-key:create"])
  scrubbe_apikey            ApiKey[]
  business                  Business?
  ConversationParticipant   ConversationParticipant[]
  DetectionRule             DetectionRule[]
  developer                 Developer?
  Graph                     Graph[]
  Incident                  Incident[]
  IncidentComment           IncidentComment[]
  IncidentTicket            IncidentTicket[]
  Invites                   Invites[]
  Message                   Message[]
  PlaybookExecution         PlaybookExecution[]
  ProjectConfiguration      ProjectConfiguration[]
  refreshToken              RefreshToken[]
  resetTokens               ResetToken[]
  VerificationOTP           VerificationOTP?
  Customer                  Customer[]                  @relation("CustomerToUser")
  userThirdpartyIntegration UserThirdpartyIntegration[]

  @@index([apiKey])
}

model Developer {
  id             String   @id @default(uuid())
  experience     String?
  githubUsername String?
  jobTitle       String?
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String            @id @default(cuid())
  keyHash     String            @unique
  version     Int
  environment APIkeyEnvironment
  name        String
  userId      String
  scopes      String[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  expiresAt   DateTime?
  isActive    Boolean           @default(true)
  lastUsed    DateTime?
  user        User              @relation(fields: [userId], references: [id])
}

model Business {
  id                         String                       @id @default(uuid())
  name                       String?
  industry                   String?
  primaryRegion              String?
  logo                       String?
  address                    String?
  companySize                String
  purpose                    String?
  dashBoardId                String?                      @unique
  userId                     String                       @unique
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  user                       User                         @relation(fields: [userId], references: [id])
  dashboard                  BusinessDashboard?           @relation("BusinessToDashboard")
  IncidentTicket             IncidentTicket[]
  invites                    Invites[]
  IncidentTicketNotification IncidentTicketNotification[]
}

model BusinessDashboard {
  id                   String                         @id @default(uuid())
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt
  businessId           String                         @unique
  colorAccent          String                         @default("#4A90E2")
  defaultDashboard     DashboardType                  @default(SCRUBBE_DASHBOARD_SOUR)
  prefferedIntegration BusinessPrefferedIntegration[] @default([JIRA])
  notificationChannels BusinessNotificationChannels[] @default([EMAIL])
  defaultPriority      Priority[]                     @default([MEDIUM])
  business             Business                       @relation("BusinessToDashboard", fields: [businessId], references: [id])
}

model Invites {
  id                String              @id @default(uuid())
  firstName         String?
  lastName          String?
  email             String              @unique
  role              Role
  accessPermissions AccessPermissions[]
  sentById          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accepted          Boolean             @default(false)
  acceptedAt        DateTime?
  stillAMember      Boolean             @default(true)
  status            InviteStatus        @default(PENDING)
  userId            String?
  IncidentTicket    IncidentTicket[]
  business          Business            @relation(fields: [sentById], references: [id])
  user              User?               @relation(fields: [userId], references: [id])

  @@index([sentById])
}

model VerificationOTP {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sentTo    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String         @id @default(uuid())
  userId    String
  email     String
  token     String
  type      ResetTokenType
  expiresAt DateTime
  createdAt DateTime       @default(now())
  usedAt    DateTime?
  user      User           @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

model Graph {
  id        String    @id @default(uuid())
  userId    String
  type      GraphType
  data      Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model WaitingUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fullName  String
  email     String   @unique @db.VarChar(255)
  company   String
  message   String?
  role      String

  @@index([email])
  @@index([createdAt])
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique @db.VarChar(255)
  password  String
  isActive  Boolean  @default(true)

  @@index([email])
}

model RefreshToken {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  revokedAt       DateTime?
  replacedByToken String?
  ipAddress       String?
  userAgent       String?
  user            User      @relation(fields: [userId], references: [id])
}

model SecurityEvent {
  id         String    @id @default(uuid())
  timestamp  DateTime  @default(now())
  source     String
  type       String
  severity   Int       @default(0)
  rawData    Json
  processed  Boolean   @default(false)
  alertid    String?
  customerId String?
  alert      Alert?    @relation(fields: [alertid], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@index([source, type])
  @@index([timestamp])
}

model Alert {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  ruleId    String
  status    AlertStatus     @default(OPEN)
  severity  Int
  rule      DetectionRule   @relation(fields: [ruleId], references: [id])
  events    SecurityEvent[]
  incidents Incident[]      @relation("AlertToIncident")

  @@index([status])
}

model Incident {
  id               String              @id @default(uuid())
  title            String
  description      String
  priority         Priority            @default(MEDIUM)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  customerId       String?
  assigneeId       String?
  incidentTicketId String?
  status           IncidentStatus      @default(OPEN)
  conversationId   String?
  assignee         User?               @relation(fields: [assigneeId], references: [id])
  customer         Customer?           @relation(fields: [customerId], references: [id])
  IncidentTicket   IncidentTicket?     @relation(fields: [incidentTicketId], references: [id])
  playbooks        PlaybookExecution[]
  alerts           Alert[]             @relation("AlertToIncident")

  @@index([priority, createdAt])
}

model IncidentTicket {
  id              String           @id @default(uuid())
  template        IncidentTemplate @default(NONE)
  userName        String
  reason          String
  assignedToEmail String           @map("assignedTo")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ticketId        String           @unique
  status          IncidentStatus   @default(OPEN)

  assignedById String

  // SLA targets
  slaTargetAck        DateTime?
  slaTargetResolve    DateTime?
  firstAcknowledgedAt DateTime?
  resolvedAt          DateTime?
  closedAt            DateTime?
  sLABreachAuditLog   SLABreachAuditLog[]

  recommendedActions DetermineAction[]
  riskScore          Int               @default(20)
  businessId         String?
  priority           Priority          @default(LOW)

  conversation Conversation?
  comments     IncidentComment[]

  Incident                   Incident[]
  assignedBy                 User                         @relation(fields: [assignedById], references: [id])
  assignedTo                 Invites                      @relation(fields: [assignedToEmail], references: [email])
  business                   Business?                    @relation(fields: [businessId], references: [id])
  incidentTicketNotification IncidentTicketNotification[]
}

model SLABreachAuditLog {
  id                    String         @id @default(uuid())
  slaType               SLABreachType
  breachedAt            DateTime
  breachDurationMinutes Int
  incidentId            String
  incident              IncidentTicket @relation(fields: [incidentId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([incidentId])
  @@index([slaType])
  @@index([createdAt])
}

model IncidentTicketNotification {
  id         String   @id @default(uuid())
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  ticket   IncidentTicket @relation(fields: [ticketId], references: [id])
  ticketId String

  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserThirdpartyIntegration {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  provider BusinessNotificationChannels

  accessToken  String?
  refreshToken String?

  metadata Json?

  defaultTarget String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider], name: "userId_provider")
}

model Conversation {
  id               String                    @id @default(uuid())
  incidentTicketId String                    @unique
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  incidentTicket   IncidentTicket            @relation(fields: [incidentTicketId], references: [id])
  participants     ConversationParticipant[]
  messages         Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model EzraRule {
  id          String   @id @default(cuid())
  description String
  metric      String
  threshold   Int
  timeWindow  String
  actions     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectConfiguration {
  id          String        @id @default(uuid())
  name        String
  enviroment  String
  domain      String?
  description String?
  lastseen    DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     String
  modules     String[]
  package     PackageModule
  owner       User          @relation(fields: [ownerId], references: [id])

  @@unique([ownerId, package])
  @@index([ownerId])
}

model Customer {
  id           String          @id @default(uuid())
  name         String
  contactEmail String          @unique
  tenantId     String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isActive     Boolean         @default(true)
  contracts    Contract[]
  incidents    Incident[]
  events       SecurityEvent[]
  users        User[]          @relation("CustomerToUser")

  @@index([tenantId])
  @@index([contactEmail])
}

model IncidentComment {
  id               String          @id @default(uuid())
  content          String
  isInternal       Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  authorId         String
  incidentTicketId String?
  isBusinessOwner  Boolean         @default(false)
  author           User            @relation(fields: [authorId], references: [id])
  IncidentTicket   IncidentTicket? @relation(fields: [incidentTicketId], references: [id])

  @@index([incidentTicketId])
  @@index([authorId])
}

model PlaybookExecution {
  id            String         @id @default(uuid())
  name          String
  status        PlaybookStatus @default(RUNNING)
  startedAt     DateTime       @default(now())
  endedAt       DateTime?
  logs          Json
  steps         Json
  parameters    Json
  incidentId    String
  initiatedById String?
  incident      Incident       @relation(fields: [incidentId], references: [id])
  initiatedBy   User?          @relation(fields: [initiatedById], references: [id])

  @@index([incidentId])
  @@index([status])
  @@index([startedAt])
}

model Contract {
  id           String        @id @default(uuid())
  customerId   String
  serviceLevel AgreementType
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  customer     Customer      @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model DetectionRule {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String
  condition            Json
  query                String?
  severity             DetectionRuleSeverity @default(MEDIUM)
  status               DetectionRuleStatus   @default(DRAFT)
  type                 DetectionRuleType
  source               DetectionRuleSource   @default(CUSTOM)
  mitreTactics         String[]
  mitreTechniques      String[]
  version              Int                   @default(1)
  whocreated           String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdById          String
  updatedById          String?
  interval             Int                   @default(3600)
  lastExecuted         DateTime?
  isActive             Boolean               @default(true)
  falsePositives       String[]
  mitigation           String?
  references           String[]
  tags                 String[]
  platform             DetectionRulePlatform @default(CUSTOM)
  autoGenerateIncident Boolean               @default(false)
  alerts               Alert[]
  updatedBy            User?                 @relation(fields: [updatedById], references: [id])

  @@index([severity])
  @@index([status])
  @@index([type])
  @@index([source])
  @@index([createdById])
  @@index([isActive])
  @@index([lastExecuted])
}

enum GraphType {
  MULTIPLE_FAILED_LOGINS
  UNUSUAL_LOCATIONS
  HIGH_VELOCITY_PASSWORD_GUESS
  IP_ADDRESSES_TARGETING_MULTIPLE_ACCOUNTS
  GEOGRAPHICALLY_IMPOSSIBLE_LOGINS
  TRAVEL_VELOCITY_ANALYSIS
}

enum ResetTokenType {
  VERIFICATION_CODE
  RESET_LINK
}

enum Role {
  USER
  ADMIN
  CUSTOMER
  INTEGRATION
}

enum AlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  SUPPRESSED
}

enum PlaybookStatus {
  RUNNING
  COMPLETED
  FAILED
  TERMINATED
}

enum DetectionRuleSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DetectionRuleStatus {
  DRAFT
  ACTIVE
  DISABLED
  TESTING
  DEPRECATED
}

enum DetectionRuleType {
  THRESHOLD
  ANOMALY
  CORRELATION
  STATIC
  MACHINE_LEARNING
  IOC
  BEHAVIORAL
}

enum DetectionRuleSource {
  CUSTOM
  MITRE
  VENDOR
  COMMUNITY
  GOVERNMENT
}

enum DetectionRulePlatform {
  CUSTOM
  AZURE
  AWS
  GCP
  CROWDSTRIKE
  SNORT
  SURICATA
  ELK
  SPLUNK
}

enum AgreementType {
  BASIC
  ENTERPRISE
  GOVERNMENT
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Roles {
  CISO
  SECURITY_ENGINEER
  SOC_ANALYST
  IT_MANAGER
  OTHERS
}

enum AccountType {
  DEVELOPER
  BUSINESS
}

enum OAuthProvider {
  GOOGLE
  AWS
  GITHUB
  GITLAB
  AZURE
}

enum AccessPermissions {
  VIEW_DASHBOARD
  MODIFY_DASHBOARD
  EXECUTE_ACTIONS
  MANAGE_USERS
}

enum DashboardType {
  SCRUBBE_DASHBOARD_SIEM
  SCRUBBE_DASHBOARD_SOUR
  CUSTOM
}

enum BusinessPrefferedIntegration {
  JIRA
  FRESH_DESK
  SERVICE_NOW
}

enum BusinessNotificationChannels {
  SLACK
  MICROSOFT_TEAMS
  EMAIL
  SMS
}

enum PackageModule {
  FINGERPRINT
}

enum IncidentTemplate {
  NONE
  PHISHING
  MALWARE
}

enum APIkeyEnvironment {
  DEVELOPMENT
  PRODUCTION
}

enum DetermineAction {
  LOCK_ACCOUNT
  NOTIFY_ANALYST
  QUARANTINE
  TERMINATE_SESSION
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SLABreachType {
  ACK
  RESOLVE
}

enum SLAStatus {
  PENDING
  MET
  BREACHED
}
