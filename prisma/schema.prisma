generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  passwordHash       String?
  firstName          String?
  lastName           String?
  isVerified         Boolean             @default(false)
  isActive           Boolean             @default(true)
  lastLogin          DateTime?
  apiKeyDuration     DateTime            @default(now())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apiKey             String?             @default(cuid())
  role               Role                @default(USER)
  experience         String?
  passwordChangedAt  DateTime?
  username           String?
  accountType        AccountType?
  address            String?
  companySize        String?
  purpose            String?
  image              String?
  oauthprovider      OAuthProvider?
  registerdWithOauth Boolean             @default(false)
  oauthProvider_uuid String?
  DetectionRule      DetectionRule[]
  Incident           Incident[]
  IncidentComment    IncidentComment[]
  PlaybookExecution  PlaybookExecution[]
  refreshToken       RefreshToken[]
  resetTokens        ResetToken[]
  VerificationOTP    VerificationOTP?
  Customer           Customer[]          @relation("CustomerToUser")

  @@index([apiKey])
}

model VerificationOTP {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sentTo    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String         @id @default(uuid())
  userId    String
  email     String
  token     String
  type      ResetTokenType
  expiresAt DateTime
  createdAt DateTime       @default(now())
  usedAt    DateTime?
  user      User           @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

model WaitingUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fullName  String
  email     String   @unique @db.VarChar(255)
  company   String
  message   String?
  role      String

  @@index([email])
  @@index([createdAt])
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique @db.VarChar(255)
  password  String
  isActive  Boolean  @default(true)

  @@index([email])
}

model RefreshToken {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  revokedAt       DateTime?
  replacedByToken String?
  ipAddress       String?
  userAgent       String?
  user            User      @relation(fields: [userId], references: [id])
}

model SecurityEvent {
  id         String    @id @default(uuid())
  timestamp  DateTime  @default(now())
  source     String
  type       String
  severity   Int       @default(0)
  rawData    Json
  processed  Boolean   @default(false)
  alertid    String?
  customerId String?
  alert      Alert?    @relation(fields: [alertid], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@index([source, type])
  @@index([timestamp])
}

model Alert {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  ruleId    String
  status    AlertStatus     @default(OPEN)
  severity  Int
  rule      DetectionRule   @relation(fields: [ruleId], references: [id])
  events    SecurityEvent[]
  incidents Incident[]      @relation("AlertToIncident")

  @@index([status])
}

model Incident {
  id          String              @id @default(uuid())
  title       String
  description String
  status      IncidentStatus      @default(OPEN)
  priority    Priority            @default(MEDIUM)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  customerId  String?
  assigneeId  String?
  assignee    User?               @relation(fields: [assigneeId], references: [id])
  customer    Customer?           @relation(fields: [customerId], references: [id])
  comments    IncidentComment[]
  playbooks   PlaybookExecution[]
  alerts      Alert[]             @relation("AlertToIncident")

  @@index([status, priority])
}

model Customer {
  id           String          @id @default(uuid())
  name         String
  contactEmail String          @unique
  tenantId     String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isActive     Boolean         @default(true)
  contracts    Contract[]
  incidents    Incident[]
  events       SecurityEvent[]
  users        User[]          @relation("CustomerToUser")

  @@index([tenantId])
  @@index([contactEmail])
}

model IncidentComment {
  id         String   @id @default(uuid())
  content    String
  isInternal Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  incidentId String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  incident   Incident @relation(fields: [incidentId], references: [id])

  @@index([incidentId])
  @@index([authorId])
}

model PlaybookExecution {
  id            String         @id @default(uuid())
  name          String
  status        PlaybookStatus @default(RUNNING)
  startedAt     DateTime       @default(now())
  endedAt       DateTime?
  logs          Json
  steps         Json
  parameters    Json
  incidentId    String
  initiatedById String?
  incident      Incident       @relation(fields: [incidentId], references: [id])
  initiatedBy   User?          @relation(fields: [initiatedById], references: [id])

  @@index([incidentId])
  @@index([status])
  @@index([startedAt])
}

model Contract {
  id           String        @id @default(uuid())
  customerId   String
  serviceLevel AgreementType
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  customer     Customer      @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model DetectionRule {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String
  condition            Json
  query                String?
  severity             DetectionRuleSeverity @default(MEDIUM)
  status               DetectionRuleStatus   @default(DRAFT)
  type                 DetectionRuleType
  source               DetectionRuleSource   @default(CUSTOM)
  mitreTactics         String[]
  mitreTechniques      String[]
  version              Int                   @default(1)
  whocreated           String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdById          String
  updatedById          String?
  interval             Int                   @default(3600)
  lastExecuted         DateTime?
  isActive             Boolean               @default(true)
  falsePositives       String[]
  mitigation           String?
  references           String[]
  tags                 String[]
  platform             DetectionRulePlatform @default(CUSTOM)
  autoGenerateIncident Boolean               @default(false)
  alerts               Alert[]
  updatedBy            User?                 @relation(fields: [updatedById], references: [id])

  @@index([severity])
  @@index([status])
  @@index([type])
  @@index([source])
  @@index([createdById])
  @@index([isActive])
  @@index([lastExecuted])
}

enum ResetTokenType {
  VERIFICATION_CODE
  RESET_LINK
}

enum Role {
  USER
  ADMIN
  CUSTOMER
  INTEGRATION
}

enum AlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  SUPPRESSED
}

enum PlaybookStatus {
  RUNNING
  COMPLETED
  FAILED
  TERMINATED
}

enum DetectionRuleSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DetectionRuleStatus {
  DRAFT
  ACTIVE
  DISABLED
  TESTING
  DEPRECATED
}

enum DetectionRuleType {
  THRESHOLD
  ANOMALY
  CORRELATION
  STATIC
  MACHINE_LEARNING
  IOC
  BEHAVIORAL
}

enum DetectionRuleSource {
  CUSTOM
  MITRE
  VENDOR
  COMMUNITY
  GOVERNMENT
}

enum DetectionRulePlatform {
  CUSTOM
  AZURE
  AWS
  GCP
  CROWDSTRIKE
  SNORT
  SURICATA
  ELK
  SPLUNK
}

enum AgreementType {
  BASIC
  ENTERPRISE
  GOVERNMENT
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Roles {
  CISO
  SECURITY_ENGINEER
  SOC_ANALYST
  IT_MANAGER
  OTHERS
}

enum AccountType {
  DEVELOPER
  BUSINESS
}

enum OAuthProvider {
  GOOGLE
  AWS
  GITHUB
  GITLAB
  AZURE
}
